# Git Commands Reference Guide

## Git Branch Commands

1. git branch: List, create, or delete branches
2. git branch -a: List both remote-tracking branches and local branches
3. git branch -c: Copy a branch, together with its config and reflog
4. git branch -C: Shortcut for --copy --force
5. git branch -d: Delete a branch (must be fully merged)
6. git branch -D: Shortcut for --delete --force
7. git branch -f: Reset branch to start-point, even if branch exists
8. git branch -l: List branches (with optional pattern matching)
9. git branch -m: Move/rename a branch, together with its config and reflog
10. git branch -M: Shortcut for --move --force
11. git branch -r: List or delete remote-tracking branches
12. git branch -t: Set up tracking configuration for new branch
13. git branch -u: Set up branch's tracking information
14. git branch --abbrev: Show shortest prefix of commit object name
15. git branch --contains: List branches containing specified commit
16. git branch --edit-description: Edit branch description
17. git branch --format: Format branch listing output
18. git branch --list: List branches with optional pattern matching
19. git branch --merged: List branches merged into specified commit
20. git branch --no-merged: List branches not merged into specified commit
21. git branch --points-at: List branches of given object
22. git branch --set-upstream-to: Set branch's upstream branch
23. git branch --show-current: Print name of current branch
24. git branch --sort: Sort branches based on specified key
25. git branch --unset-upstream: Remove upstream information for branch

## Git Clean Commands

1. git clean: Remove untracked files from the working tree
2. git clean -d: Recurse into untracked directories
3. git clean -f: Force deletion of files and directories
4. git clean -i: Show and clean files interactively
5. git clean -n: Show what would be done without removing anything
6. git clean -q: Be quiet, only report errors
7. git clean -x: Remove ignored files in addition to untracked files
8. git clean -X: Remove only files ignored by Git
9. git clean --exclude: Use additional exclude pattern
10. git clean --force: Force deletion of files and directories
11. git clean --interactive: Show and clean files interactively
12. git clean --quiet: Be quiet, only report errors

## Git Commit Commands

1. git commit: Record changes to the repository
2. git commit -a: Automatically stage modified and deleted files
3. git commit -c: Reuse commit message and edit it
4. git commit -C: Reuse commit message without editing
5. git commit -e: Edit commit message
6. git commit -F: Take commit message from file
7. git commit -m: Use specified message for commit
8. git commit -n: Bypass pre-commit and commit-msg hooks
9. git commit -p: Use interactive patch selection
10. git commit -q: Suppress commit summary message
11. git commit -s: Add Signed-off-by trailer
12. git commit -v: Show unified diff in commit message
13. git commit --amend: Replace tip of current branch with new commit
14. git commit --author: Override commit author
15. git commit --date: Override author date
16. git commit --dry-run: Show what would be committed
17. git commit --fixup: Create fixup commit
18. git commit --no-edit: Use commit message without editing
19. git commit --no-verify: Bypass pre-commit and commit-msg hooks
20. git commit --reset-author: Reset author information
21. git commit --squash: Create squash commit
22. git commit --status: Include status in commit message

## Git Pull Commands

1. git pull: Fetch from and integrate with another repository or local branch
2. git pull -a: Append ref names and object names to FETCH_HEAD
3. git pull -f: Force update of local branches
4. git pull -j: Set number of parallel children for fetching
5. git pull -k: Keep downloaded pack
6. git pull -p: Remove remote-tracking references that no longer exist
7. git pull -q: Be quiet, suppress progress reporting
8. git pull -r: Rebase current branch on top of upstream branch
9. git pull -t: Fetch all tags from remote
10. git pull -v: Be verbose, show progress
11. git pull --all: Fetch all remotes
12. git pull --atomic: Use atomic transaction to update refs
13. git pull --autostash: Create temporary stash before operation
14. git pull --depth: Limit fetching to specified number of commits
15. git pull --dry-run: Show what would be done without making changes
16. git pull --ff-only: Only update if there is no divergent local history
17. git pull --force: Force update of local branches
18. git pull --no-edit: Accept auto-generated merge message
19. git pull --no-ff: Create merge commit even when fast-forward is possible
20. git pull --no-rebase: Merge upstream branch into current branch
21. git pull --no-tags: Disable automatic tag following
22. git pull --progress: Force progress status reporting
23. git pull --rebase: Rebase current branch on top of upstream branch
24. git pull --set-upstream: Add upstream reference after successful fetch
25. git pull --squash: Create single commit instead of merge
26. git pull --strategy: Use specified merge strategy
27. git pull --unshallow: Convert shallow repository to complete one
28. git pull --verify-signatures: Verify tip commit of side branch

## Git Reset Commands

1. git reset: Reset current HEAD to the specified state
2. git reset -N: Mark removed paths as intent-to-add
3. git reset -p: Interactively select hunks to reset
4. git reset -q: Be quiet, only report errors
5. git reset --hard: Reset index and working tree
6. git reset --keep: Reset index entries and update files in working tree
7. git reset --merge: Reset index and update files in working tree
8. git reset --mixed: Reset index but not working tree
9. git reset --no-refresh: Skip refreshing index after mixed reset
10. git reset --pathspec-from-file: Take pathspec from file
11. git reset --quiet: Be quiet, only report errors
12. git reset --refresh: Refresh index after mixed reset
13. git reset --soft: Reset HEAD without touching index or working tree
